{"version":3,"sources":["defaultContent.js","App.js","serviceWorker.js","index.js"],"names":["defaultContent","App","props","_this","Object","classCallCheck","this","_super","call","state","value","handleChange","bind","assertThisInitialized","createMarkup","e","setState","target","str","marked","setOptions","breaks","__html","react_default","a","createElement","class","App_Editor","onChange","App_Preview","markup","Component","Editor","id","classNames","name","cols","rows","Preview","className","dangerouslySetInnerHTML","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOA8DeA,EA9DK,yqDCKdC,2DACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAI,EAAAC,KAAAF,KAAMJ,IACDO,MAAQ,CACXC,MAAOV,GACTG,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IACpBA,EAAKW,aAAeX,EAAKW,aAAaF,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IALHA,uDAQrB,wCACE,SAAaY,GACXT,KAAKU,SAAS,CACZN,MAAOK,EAAEE,OAAOP,oCAGpB,SAAaQ,GAEX,OADAC,IAAOC,WAAW,CAACC,QAAQ,IACpB,CACLC,OAAQH,IAAOD,0BAGnB,WACE,OAAQK,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,QACfH,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,aAAYH,EAAAC,EAAAC,cAAA,iCACzBF,EAAAC,EAAAC,cAACE,EAAD,CAAQjB,MAAQJ,KAAKG,MAAMC,MAAOkB,SAAWtB,KAAKK,eAClDY,EAAAC,EAAAC,cAACI,EAAD,CAAUC,OAAUxB,KAAKQ,aAAaR,KAAKG,MAAMC,SACjDa,EAAAC,EAAAC,cAAA,uCA1BQM,cAgCZC,EAAS,SAAC9B,GACZ,OACEqB,EAAAC,EAAAC,cAAA,YAAUQ,GAAG,SAASC,WAAa,SAASC,KAAK,SAASC,KAAK,IAAIC,KAAK,KAAKT,SAAY1B,EAAM0B,UAAW1B,EAAMQ,QAIhH4B,EAAU,SAACpC,GACf,OAAOqB,EAAAC,EAAAC,cAAA,OAAKQ,GAAK,UAAUM,UAAY,SAASC,wBAAyBtC,EAAM4B,UAGlE7B,ICnCKwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.30393c65.chunk.js","sourcesContent":["const defaultContent = `# Ok, heres markup example \\`h1\\`\r\n## Let me tell you a bit about the previewer \\`h2\\`\r\n> You can see \r\n- editor window (you can change text or delete completely and write your own stuff) and \r\n- compiled version (you can see result there).\r\nLinks\r\n--\r\nYou can create a link like this\r\n[Google](https://google.com)\r\nor a re-usable thing \r\n\r\n[Marked]: https://github.com/markedjs/marked/\r\n\r\nNow  everytime you write [marked]  in square brackets, you get the link, kinda cool huh?)\r\n\r\nMarkdown style for   h1\r\n==\r\nand h2 , pick  you  fav  =)\r\n--\r\n\r\n_List name in italic github style_\r\n- item 1\r\n- **bold item 2**\r\n- item 3\r\n\r\n\r\n## \\`About code\\`\r\n\\`alert('Hola'); \\\\\\\\ inline code\\`\r\n\r\n\\`\\`\\`\r\nthis\r\nis a code block\r\n()=>{}\r\n\\`\\`\\`\r\n\r\n\r\n<pre>mycode and evenmore code\r\nand  on another line yep</pre>\r\nAnd an _image_ , just like a _link_ but with an exclamation mark in front\r\n\r\n![img](http://personal.psu.edu/xqz5228/jpg.jpg)\r\n\r\n>> ***W. Shakespeare***\r\n\r\n> <pre>When most I wink, then do mine eyes best see,\r\nFor all the day they view things unrespected;\r\nBut when I sleep, in dreams they look on thee,\r\nAnd darkly bright are bright in dark directed.\r\nThen thou, whose shadow shadows doth make bright,\r\nHow would thy shadow's form form happy show\r\nTo the clear day with thy much clearer light,\r\nWhen to unseeing eyes thy shade shines so!\r\nHow would, I say, mine eyes be blessed made\r\nBy looking on thee in the living day, \r\nWhen in dead night thy fair imperfect shade\r\nThrough heavy sleep on sightless eyes doth stay!\r\nAll days are nights to see till I see thee,\r\nAnd nights bright days when dreams do show thee me.</pre><br />\r\n\r\nAnd  heres is [marked.js docs](https://marked.js.org/) in case you want more details.\r\n`;\r\n\r\nexport default defaultContent;","import React, {Component} from 'react';\nimport marked from 'marked';\nimport defaultContent from './defaultContent';\nimport './App.css';\n\nclass App extends Component {  \n  constructor(props) {\n    super(props);    \n    this.state = {\n      value: defaultContent};\n    this.handleChange = this.handleChange.bind(this);\n    this.createMarkup = this.createMarkup.bind(this);\n  }\n  \ncomponentDidMount() {}\n  handleChange(e) {\n    this.setState({\n      value: e.target.value \n    });\n  }   \n  createMarkup(str) {\n    marked.setOptions({breaks: true});\n    return {\n      __html: marked(str)\n    };\n  }\n  render(){\n    return (<div class = \"wrap\">\n          <div class = \"app_title\"><h1>Markdown Previewer</h1></div>\n          <Editor value= {this.state.value} onChange ={this.handleChange}/>\n          <Preview  markup = {this.createMarkup(this.state.value)}/>\n          <footer>by Annestezia</footer>\n  </div>\n    );\n  }\n}\n\nconst Editor = (props)=> {\n    return (\n      <textarea id=\"editor\" classNames = \"column\" name=\"editor\" cols=\"1\" rows=\"15\" onChange = {props.onChange}>{props.value}</textarea>\n    );\n};\n\nconst Preview = (props)=>{\n  return <div id = \"preview\" className = \"column\" dangerouslySetInnerHTML={props.markup} />;\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}